{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to organelle_segmenter_plugin","text":"<p>\ud83d\udea7 WIP \ud83d\udea7</p> <p>For full documentation visit ndcn.github.io/organelle-segmenter-plugin This plugin that enables image segmentation of organelles from linearly-unmixed florescence images based on the segmenter tools provided by Allen Institute for Cell Science.  This fork is NOT a 3D (volumetric) segmentation at this time.  Instead it is a proof-of-concept which infers an \"best\" Z-slice / Z-projection and performes a 2D analysis.</p> <p>This plugin is designed to work with infer-subc and aics-segmenter</p>"},{"location":"#goal","title":"GOAL","text":"<p>To measure shape, position, size, and interaction of eight organelles/cellular components (Nuclei (NU), Lysosomes (LS),Mitochondria (MT), Golgi (GL), Peroxisomes (PO), Endoplasmic Reticulum (ER), Lipid Droplet (LD), and SOMA) during differentiation of iPSCs, in order to understand the Interactome / Spatiotemporal coordination.</p>"},{"location":"#forked-from-allen-institute-for-cell-science-project","title":"Forked from Allen Institute for Cell Science project","text":"<p>The Allen Cell &amp; Structure Segmenter plugin for napari, from which this projects is forked, provides an intuitive graphical user interface to access the powerful segmentation capabilities of an open source 3D segmentation software package developed and maintained by the Allen Institute for Cell Science (classic workflows only with v1.0). \u200bThe Allen Cell &amp; Structure Segmenter is a Python-based open source toolkit developed at the Allen Institute for Cell Science for 3D segmentation of intracellular structures in fluorescence microscope images. This toolkit brings together classic image segmentation and iterative deep learning workflows first to generate initial high-quality 3D intracellular structure segmentations and then to easily curate these results to generate the ground truths for building robust and accurate deep learning models. The toolkit takes advantage of the high replicate 3D live cell image data collected at the Allen Institute for Cell Science of over 30 endogenous fluorescently tagged human induced pluripotent stem cell (hiPSC) lines. Each cell line represents a different intracellular structure with one or more distinct localization patterns within undifferentiated hiPS cells and hiPSC-derived cardiomyocytes.</p> <p>More details about Segmenter can be found at https://allencell.org/segmenter</p>"},{"location":"#installation-wip","title":"Installation \ud83d\udea7 WIP \ud83d\udea7","text":""},{"location":"#option-2-recommended","title":"Option 2 (recommended):","text":"<p>Clone the repo and install as editable module via pip.  via [pip]:</p> <pre><code>pip install -e &lt;path_to_cloned_repo&gt;\n</code></pre>"},{"location":"#option-2-coming-soon-not-yet-available-on-pypy","title":"Option 2 \ud83d\udea7 COMING SOON \ud83d\udea7 (not yet available on pypy)","text":"<p>After you installed the lastest version of napari, you can go to \"Plugins\" --&gt; \"Install/Uninstall Package(s)\". Then, you will be able to see all available napari plugins and you can find us by name <code>organelle-segmenter-plugin</code>. Just click the \"install\" button to install the Segmenter plugin.</p>"},{"location":"#option-3-coming-soon-not-yet-available-on-pypy","title":"Option 3: \ud83d\udea7 COMING SOON \ud83d\udea7 (not yet available on pypy)","text":"<p>You can also install <code>organelle-segmenter-plugin</code> via [pip]:</p> <pre><code>pip install organelle-segmenter-plugin\n</code></pre>"},{"location":"#overview","title":"OVERVIEW","text":"<p>In the current version, there are two parts in the plugin: workflow editor and batch processing. The workflow editor allows users adjusting parameters in all the existing workflows in the lookup table, so that the workflow can be optimized on users' data. The adjusted workflow can be saved and then applied to a large batch of files using the batch processing part of the plugin. </p> <ol> <li>Open a file in napari by dragging multi-channel .czi file onto napari which will import a multi-channel, multi-Z 'layer'. (Using the menu's defaults to <code>aicsIMAGEIO</code> reader which automatically splits mutliple channels into individual layers.  The plugin is able to support multi-dimensional data in .tiff, .tif. ome.tif, .ome.tiff, .czi)</li> <li>Start the plugin (open napari, go to \"Plugins\" --&gt; \"organelle-segmenter-plugin\" --&gt; \"workflow editor\")</li> <li>Select the image and channel to work on</li> <li>Select a workflow based on the example image and target segmentation based on user's data. Ideally, it is recommend to start with the example with very similar morphology as user's data.</li> <li>Click \"Run All\" to execute the whole workflow on the sample data.</li> <li>Adjust the parameters of steps, based on the intermediate results. For instruction on the details on each function and the effect of each parameter, click the tooltip button. A complete list of all functions can be found here</li> <li>Click \"Run All\" again after adjusting the parameters and repeat step 6 and 7 until the result is satisfactory.</li> <li>Save the workflow</li> <li>Close the plugin and open the batch processing part by (go to \"Plugins\" --&gt; \"organelle-segmenter-plugin\" --&gt; \"batch processing\")</li> <li>Load the customized workflow (or an off-the-shelf workflow) json file</li> <li>Load the folder with all the images to process</li> <li>Click \"Run\"</li> </ol>"},{"location":"#napari","title":"<code>napari</code>","text":"<p>napari is a fast, interactive, multi-dimensional image viewer for Python. It's designed for browsing, annotating, and analyzing large multi-dimensional images. It's built on top of Qt (for the GUI), vispy (for performant GPU-based rendering), and the scientific Python stack (numpy, scipy). It can be installed via python tools (i.e. <code>pip</code> or <code>conda</code>) or as a stand-alone gui. More info can be found on their website and at this repository.</p> <p>A powerful extension framework of napari plugins  extend <code>napari</code>s functionality.   More infor can be foudn at the napari hub The napari hub seeks to solve many of the challenges and needs in finding analysis solutions to bioimaging problems. </p>"},{"location":"organelle_segmenter_plugin/","title":"organelle_segmenter_plugin","text":""},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller","title":"<code>Controller</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>organelle_segmenter_plugin/core/controller.py</code> <pre><code>class Controller(ABC):\n    def __init__(self, application: IApplication):\n        if application is None:\n            raise ValueError(\"application\")\n        self._application = application\n\n    @abstractmethod\n    def index(self):\n        pass\n\n    def cleanup(self):\n\"\"\"\n        Perform cleanup operations such as disconnecting events\n        Override in child class if needed\n        \"\"\"\n        pass\n\n    @property\n    def state(self) -&gt; State:\n\"\"\"\n        Get the application State object\n        \"\"\"\n        return self._application.state\n\n    @property\n    def router(self) -&gt; IRouter:\n\"\"\"\n        Get the application Router\n        \"\"\"\n        return self._application.router\n\n    @property\n    def viewer(self) -&gt; ViewerAbstraction:\n\"\"\"\n        Get the Napari viewer (abstracted)\n        \"\"\"\n        return self._application.viewer\n\n    def load_view(self, view: View, model: Any = None):\n\"\"\"\n        Loads the given view\n        :param: view: the View to load\n        \"\"\"\n        return self._application.view_manager.load_view(view, model)\n\n    def show_message_box(self, title: str, message: str):\n\"\"\"\n        Display a pop up message box\n        :param: title: Message box title\n        :param: message: message body to display\n        \"\"\"\n        msg = QMessageBox()\n        msg.setWindowTitle(title)\n        msg.setText(message)\n        return msg.exec()\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.router","title":"<code>router: IRouter</code>  <code>property</code>","text":"<p>Get the application Router</p>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.state","title":"<code>state: State</code>  <code>property</code>","text":"<p>Get the application State object</p>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.viewer","title":"<code>viewer: ViewerAbstraction</code>  <code>property</code>","text":"<p>Get the Napari viewer (abstracted)</p>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.cleanup","title":"<code>cleanup()</code>","text":"<p>Perform cleanup operations such as disconnecting events Override in child class if needed</p> Source code in <code>organelle_segmenter_plugin/core/controller.py</code> <pre><code>def cleanup(self):\n\"\"\"\n    Perform cleanup operations such as disconnecting events\n    Override in child class if needed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.load_view","title":"<code>load_view(view, model=None)</code>","text":"<p>Loads the given view :param: view: the View to load</p> Source code in <code>organelle_segmenter_plugin/core/controller.py</code> <pre><code>def load_view(self, view: View, model: Any = None):\n\"\"\"\n    Loads the given view\n    :param: view: the View to load\n    \"\"\"\n    return self._application.view_manager.load_view(view, model)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.controller.Controller.show_message_box","title":"<code>show_message_box(title, message)</code>","text":"<p>Display a pop up message box :param: title: Message box title :param: message: message body to display</p> Source code in <code>organelle_segmenter_plugin/core/controller.py</code> <pre><code>def show_message_box(self, title: str, message: str):\n\"\"\"\n    Display a pop up message box\n    :param: title: Message box title\n    :param: message: message body to display\n    \"\"\"\n    msg = QMessageBox()\n    msg.setWindowTitle(title)\n    msg.setText(message)\n    return msg.exec()\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.layer_reader.LayerReader","title":"<code>LayerReader</code>","text":"<p>Reader / Helper class to extract information out of Napari Layers</p> Source code in <code>organelle_segmenter_plugin/core/layer_reader.py</code> <pre><code>class LayerReader:\n\"\"\"\n    Reader / Helper class to extract information out of Napari Layers\n    \"\"\"\n\n    def get_channels(self, layer: Layer) -&gt; List[Channel]:\n\"\"\"\n        Get the list of image channels from a layer\n\n        inputs:\n            layer (Layer): the Napari layer to read data from\n        \"\"\"\n        if layer is None:\n            return None\n\n        if self._should_read_from_path(layer):\n            try:\n                return self._get_channels_from_path(layer.source.path)\n            except Exception as ex:\n                log.warning(\n                    \"Could not read image layer from source path even though a source path was provided.\"\n                    \"Defaulting to reading from layer data (this is less accurate). \\n\"\n                    f\"Error message: {ex}\"\n                )\n\n        return self._get_channels_default(layer)\n\n    def _get_channels_default(self, layer: Layer) -&gt; List[Channel]:\n        if len(layer.data.shape) == 6:\n            # Has scenes\n            image_from_layer = [layer.data[i, :, :, :, :, :] for i in range(layer.data.shape[0])]\n        else:\n            image_from_layer = layer.data\n        img = AICSImage(image_from_layer)  # gives us a 6D image\n        img.set_scene(0)\n\n        index_c = img.dims.order.index(\"C\")\n        # index_c = img.dims.order.index(\"Z\")\n\n        channels = list()\n        # JAH: add a -1 channel/zslice for choosing all\n        channels.append(Channel(ALL_LAYERS, \"All\"))\n\n        for index in range(img.shape[index_c]):\n            channels.append(Channel(index))\n        return channels\n\n    def _get_channels_from_path(self, image_path: str) -&gt; List[Channel]:\n        img = AICSImage(image_path)\n        img.set_scene(0)\n\n        channels = list()\n        channels.append(Channel(ALL_LAYERS, \"All\"))\n\n        for index, name in enumerate(img.channel_names):\n            channels.append(Channel(index, name))\n        return channels\n\n    def get_channel_data(self, channel_index: int, layer: Layer) -&gt; np.ndarray:\n\"\"\"\n        Get the image data from the layer for a given channel\n\n        inputs:\n            channel_index (int): index of the channel to load\n            layer (Layer): the Napari layer to read data from\n        \"\"\"\n        if channel_index is None:\n            raise ValueError(\"channel_index is None\")\n        if layer is None:\n            raise ValueError(\"layer is None\")\n\n        if self._should_read_from_path(layer):\n            try:\n                return self._get_channel_data_from_path(channel_index, layer.source.path)\n            except Exception as ex:\n                log.warning(\n                    \"Could not read image layer from source path even though a source path was provided.\"\n                    \"Defaulting to reading from layer data (this is less accurate). \\n\"\n                    f\"Error message: {ex}\"\n                )\n        return self._get_channel_data_default(channel_index, layer)\n\n    def _get_channel_data_default(self, channel_index: int, layer: Layer):\n        print(f\"in _get_channell_data_default(), shape = {layer.data.shape}\")\n        # if len(layer.data.shape) &gt;= 6:\n        #     # Has scenes\n        #     print(f\"&gt;&gt;&gt;&gt;&gt;&gt; . Has Secnes layer.data.shape&gt;6 {layer.data.shape}\")\n        #     image_from_layer = [layer.data[i, :, :, :, :, :] for i in range(layer.data.shape[0])]\n        # else:\n        #     image_from_layer = layer.data\n\n        # img = AICSImage(image_from_layer)  # gives us a 6D image\n\n        # # use get_image_data() to parse out ZYX dimensions\n        # # segmenter requries 3D images.\n        # img.set_scene(0)\n        # # return img.get_image_data(\"ZYX\", T=0, C=channel_index)\n        # out_img = img.get_image_data(\"CYX\", T=0, Z=channel_index)\n        # print(f\"out_img shape {out_img.shape}\")\n\n        if channel_index &lt; 0:\n            return layer.data\n        else:\n            return layer.data[channel_index]\n\n    def _get_channel_data_from_path(self, channel_index: int, image_path: str):\n        print(\"in _get_channel_data_from_path()\")\n        img = AICSImage(image_path)\n        img.set_scene(0)\n        # return img.get_image_data(\"ZYX\", T=0, C=channel_index)\n\n        if channel_index &lt; 0:\n            return img.get_image_data(\"CZYX\")\n        else:\n            return img.get_image_data(\"CZYX\")[channel_index]\n\n    def _should_read_from_path(self, layer: Layer):\n        if layer.source is None:\n            return False\n        if layer.source.path is None:\n            return False\n        # Here we are making a deliberate choice to not try and load metadata from the source\n        # if a reader plugin other than the default built-in plugin was used. This is because\n        # plugins like napari-aicsimageio may convert channels into individual layers, which is not compatible\n        # with the current plugin User Experience. This is a workaround to allow basic compatibility\n        # with reader plugins and allow to do work with CZI files and other formats supported by napari-aicsimageio\n        # TODO - come up with a better long term solution\n        if layer.source.reader_plugin != \"builtins\":\n            return False\n\n        return True\n\n    def get_all_data(self, layer: Layer) -&gt; np.ndarray:\n\"\"\"\n        Get the image data from the layer for a given channel\n\n        inputs:\n            channel_index (int): index of the channel to load\n            layer (Layer): the Napari layer to read data from\n        \"\"\"\n        if layer is None:\n            raise ValueError(\"layer is None\")\n        return layer.data\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.layer_reader.LayerReader.get_all_data","title":"<code>get_all_data(layer)</code>","text":"<p>Get the image data from the layer for a given channel</p> inputs <p>channel_index (int): index of the channel to load layer (Layer): the Napari layer to read data from</p> Source code in <code>organelle_segmenter_plugin/core/layer_reader.py</code> <pre><code>def get_all_data(self, layer: Layer) -&gt; np.ndarray:\n\"\"\"\n    Get the image data from the layer for a given channel\n\n    inputs:\n        channel_index (int): index of the channel to load\n        layer (Layer): the Napari layer to read data from\n    \"\"\"\n    if layer is None:\n        raise ValueError(\"layer is None\")\n    return layer.data\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.layer_reader.LayerReader.get_channel_data","title":"<code>get_channel_data(channel_index, layer)</code>","text":"<p>Get the image data from the layer for a given channel</p> inputs <p>channel_index (int): index of the channel to load layer (Layer): the Napari layer to read data from</p> Source code in <code>organelle_segmenter_plugin/core/layer_reader.py</code> <pre><code>def get_channel_data(self, channel_index: int, layer: Layer) -&gt; np.ndarray:\n\"\"\"\n    Get the image data from the layer for a given channel\n\n    inputs:\n        channel_index (int): index of the channel to load\n        layer (Layer): the Napari layer to read data from\n    \"\"\"\n    if channel_index is None:\n        raise ValueError(\"channel_index is None\")\n    if layer is None:\n        raise ValueError(\"layer is None\")\n\n    if self._should_read_from_path(layer):\n        try:\n            return self._get_channel_data_from_path(channel_index, layer.source.path)\n        except Exception as ex:\n            log.warning(\n                \"Could not read image layer from source path even though a source path was provided.\"\n                \"Defaulting to reading from layer data (this is less accurate). \\n\"\n                f\"Error message: {ex}\"\n            )\n    return self._get_channel_data_default(channel_index, layer)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.layer_reader.LayerReader.get_channels","title":"<code>get_channels(layer)</code>","text":"<p>Get the list of image channels from a layer</p> inputs <p>layer (Layer): the Napari layer to read data from</p> Source code in <code>organelle_segmenter_plugin/core/layer_reader.py</code> <pre><code>def get_channels(self, layer: Layer) -&gt; List[Channel]:\n\"\"\"\n    Get the list of image channels from a layer\n\n    inputs:\n        layer (Layer): the Napari layer to read data from\n    \"\"\"\n    if layer is None:\n        return None\n\n    if self._should_read_from_path(layer):\n        try:\n            return self._get_channels_from_path(layer.source.path)\n        except Exception as ex:\n            log.warning(\n                \"Could not read image layer from source path even though a source path was provided.\"\n                \"Defaulting to reading from layer data (this is less accurate). \\n\"\n                f\"Error message: {ex}\"\n            )\n\n    return self._get_channels_default(layer)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.state.State","title":"<code>State</code>","text":"<p>Application state wrapper. Use this class as a way to easily store and access stateful data that needs to be shared accross controllers</p> Source code in <code>organelle_segmenter_plugin/core/state.py</code> <pre><code>class State:\n\"\"\"\n    Application state wrapper.\n    Use this class as a way to easily store and access stateful data that needs to be shared accross controllers\n    \"\"\"\n\n    @lazy_property\n    def segmenter_model(self) -&gt; SegmenterModel:\n        return SegmenterModel()\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.View","title":"<code>View</code>","text":"<p>         Bases: <code>ABC</code>, <code>QWidget</code></p> <p>Base class for all Views to derive from</p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>class View(ABC, QWidget, metaclass=ViewMeta):\n\"\"\"\n    Base class for all Views to derive from\n    \"\"\"\n\n    _template = None\n\n    def __init__(self, template_class: type = None):\n        QWidget.__init__(self)\n        if template_class is not None:\n            if not issubclass(template_class, ViewTemplate):\n                raise TypeError(f\"Template type must be a subclass of {ViewTemplate}\")\n\n            self._template = template_class()\n\n    @property\n    def template(self):\n\"\"\"\n        Returns the view template\n        \"\"\"\n        return self._template\n\n    def has_template(self) -&gt; bool:\n\"\"\"\n        True if the view has a template view, False otherwise\n        \"\"\"\n        return self.template is not None\n\n    @abstractmethod\n    def load(self, model: Any = None):\n\"\"\"\n        Called when the view is loaded.\n        When implementing in child class, use to load initial model data\n        and setup the view's UI components\n\n        inputs:\n            model - optional model to pass to the view at load time\n        \"\"\"\n        pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.View.template","title":"<code>template</code>  <code>property</code>","text":"<p>Returns the view template</p>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.View.has_template","title":"<code>has_template()</code>","text":"<p>True if the view has a template view, False otherwise</p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>def has_template(self) -&gt; bool:\n\"\"\"\n    True if the view has a template view, False otherwise\n    \"\"\"\n    return self.template is not None\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.View.load","title":"<code>load(model=None)</code>  <code>abstractmethod</code>","text":"<p>Called when the view is loaded. When implementing in child class, use to load initial model data and setup the view's UI components</p> inputs <p>model - optional model to pass to the view at load time</p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>@abstractmethod\ndef load(self, model: Any = None):\n\"\"\"\n    Called when the view is loaded.\n    When implementing in child class, use to load initial model data\n    and setup the view's UI components\n\n    inputs:\n        model - optional model to pass to the view at load time\n    \"\"\"\n    pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.ViewTemplate","title":"<code>ViewTemplate</code>","text":"<p>         Bases: <code>View</code></p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>class ViewTemplate(View):\n    @abstractmethod\n    def get_container(self) -&gt; QFrame:\n\"\"\"\n        Get the template's container Frame\n        This should be container QFrame in which the child View or ViewTemplate be displayed\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def load(self):\n\"\"\"\n        Called when the view template is loaded.\n        When implementing in child class, use to load initial model data\n        and setup the view's UI components\n        \"\"\"\n        pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.ViewTemplate.get_container","title":"<code>get_container()</code>  <code>abstractmethod</code>","text":"<p>Get the template's container Frame This should be container QFrame in which the child View or ViewTemplate be displayed</p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>@abstractmethod\ndef get_container(self) -&gt; QFrame:\n\"\"\"\n    Get the template's container Frame\n    This should be container QFrame in which the child View or ViewTemplate be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.core.view.ViewTemplate.load","title":"<code>load()</code>  <code>abstractmethod</code>","text":"<p>Called when the view template is loaded. When implementing in child class, use to load initial model data and setup the view's UI components</p> Source code in <code>organelle_segmenter_plugin/core/view.py</code> <pre><code>@abstractmethod\ndef load(self):\n\"\"\"\n    Called when the view template is loaded.\n    When implementing in child class, use to load initial model data\n    and setup the view's UI components\n    \"\"\"\n    pass\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.model.segmenter_model.SegmenterModel","title":"<code>SegmenterModel</code>  <code>dataclass</code>","text":"<p>Main Segmenter plugin model</p> Source code in <code>organelle_segmenter_plugin/model/segmenter_model.py</code> <pre><code>@dataclass\nclass SegmenterModel:\n\"\"\"\n    Main Segmenter plugin model\n    \"\"\"\n\n    layers: List[str] = None\n    selected_layer: Layer = None\n\n    channels: List[str] = None\n    selected_channel: Channel = None\n\n    workflows: List[str] = None\n    active_workflow: Workflow = None\n\n    # not actually using these\n    prebuilt_workflows: List[str] = None\n    additional_workflows: List[str] = None\n\n    def reset(self):\n\"\"\"\n        Reset model state\n        \"\"\"\n        self.layers = None\n        self.selected_layer = None\n        self.channels = None\n        self.selected_channel = None\n        self.workflows = None\n        self.active_workflow = None\n        self.prebuilt_workflows = None\n        self.additional_workflows = None\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.model.segmenter_model.SegmenterModel.reset","title":"<code>reset()</code>","text":"<p>Reset model state</p> Source code in <code>organelle_segmenter_plugin/model/segmenter_model.py</code> <pre><code>def reset(self):\n\"\"\"\n    Reset model state\n    \"\"\"\n    self.layers = None\n    self.selected_layer = None\n    self.channels = None\n    self.selected_channel = None\n    self.workflows = None\n    self.active_workflow = None\n    self.prebuilt_workflows = None\n    self.additional_workflows = None\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.directories.Directories","title":"<code>Directories</code>","text":"<p>Provides safe paths to common module directories</p> Source code in <code>organelle_segmenter_plugin/util/directories.py</code> <pre><code>class Directories:\n\"\"\"\n    Provides safe paths to common module directories\n    \"\"\"\n\n    _module_base_dir = Path(organelle_segmenter_plugin.__file__).parent\n\n    @classmethod\n    def get_assets_dir(cls) -&gt; Path:\n\"\"\"\n        Path to the assets directory\n        \"\"\"\n        return cls._module_base_dir / \"assets\"\n\n    @classmethod\n    def get_style_dir(cls) -&gt; Path:\n\"\"\"\n        Path to the stylesheet directory\n        \"\"\"\n        return cls._module_base_dir / \"styles\"\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.directories.Directories.get_assets_dir","title":"<code>get_assets_dir()</code>  <code>classmethod</code>","text":"<p>Path to the assets directory</p> Source code in <code>organelle_segmenter_plugin/util/directories.py</code> <pre><code>@classmethod\ndef get_assets_dir(cls) -&gt; Path:\n\"\"\"\n    Path to the assets directory\n    \"\"\"\n    return cls._module_base_dir / \"assets\"\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.directories.Directories.get_style_dir","title":"<code>get_style_dir()</code>  <code>classmethod</code>","text":"<p>Path to the stylesheet directory</p> Source code in <code>organelle_segmenter_plugin/util/directories.py</code> <pre><code>@classmethod\ndef get_style_dir(cls) -&gt; Path:\n\"\"\"\n    Path to the stylesheet directory\n    \"\"\"\n    return cls._module_base_dir / \"styles\"\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.ui_utils.UiUtils","title":"<code>UiUtils</code>","text":"Source code in <code>organelle_segmenter_plugin/util/ui_utils.py</code> <pre><code>class UiUtils:\n    @staticmethod\n    def dropdown_row(label: str, placeholder: str = None, default: str = None, options=None, enabled=False) -&gt; FormRow:\n\"\"\"\n        Given the contents of a dropdown and a label, return a FormRow containing\n        a label and a QComboBox widget that can be used with the custom Form widget\n        \"\"\"\n        dropdown = QComboBox()\n        dropdown.setDisabled(not enabled)\n        dropdown.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n        if placeholder is not None:\n            dropdown.addItem(placeholder)\n        if options is not None:\n            str_options = [str(option) for option in options]\n            dropdown.addItems(str_options)\n        if placeholder is None and default is not None and options is not None:\n            default_index = options.index(default)\n            dropdown.setCurrentIndex(default_index)\n\n        return FormRow(label, dropdown)\n\n    @staticmethod\n    def multi_dropdown_row(\n        label: str, placeholder: str = None, default: str = None, options=None, enabled=False\n    ) -&gt; FormRow:\n\"\"\"\n        Given the contents of a dropdown and a label, return a FormRow containing\n        a label and a QListWidget widget that can be used with the custom Form widget\n        \"\"\"\n        dropdown = QListWidget()\n        dropdown.setDisabled(not enabled)\n        dropdown.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n        dropdown.setSelectionMode(QAbstractItemView.MultiSelection)\n        if placeholder is not None:\n            dropdown.addItem(placeholder)\n        if options is not None:\n            str_options = [str(option) for option in options]\n            dropdown.addItems(str_options)\n        if placeholder is None and default is not None and options is not None:\n            default_index = options.index(default)\n            dropdown.setCurrentIndex(default_index)\n\n        return FormRow(label, dropdown)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.ui_utils.UiUtils.dropdown_row","title":"<code>dropdown_row(label, placeholder=None, default=None, options=None, enabled=False)</code>  <code>staticmethod</code>","text":"<p>Given the contents of a dropdown and a label, return a FormRow containing a label and a QComboBox widget that can be used with the custom Form widget</p> Source code in <code>organelle_segmenter_plugin/util/ui_utils.py</code> <pre><code>@staticmethod\ndef dropdown_row(label: str, placeholder: str = None, default: str = None, options=None, enabled=False) -&gt; FormRow:\n\"\"\"\n    Given the contents of a dropdown and a label, return a FormRow containing\n    a label and a QComboBox widget that can be used with the custom Form widget\n    \"\"\"\n    dropdown = QComboBox()\n    dropdown.setDisabled(not enabled)\n    dropdown.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n    if placeholder is not None:\n        dropdown.addItem(placeholder)\n    if options is not None:\n        str_options = [str(option) for option in options]\n        dropdown.addItems(str_options)\n    if placeholder is None and default is not None and options is not None:\n        default_index = options.index(default)\n        dropdown.setCurrentIndex(default_index)\n\n    return FormRow(label, dropdown)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.util.ui_utils.UiUtils.multi_dropdown_row","title":"<code>multi_dropdown_row(label, placeholder=None, default=None, options=None, enabled=False)</code>  <code>staticmethod</code>","text":"<p>Given the contents of a dropdown and a label, return a FormRow containing a label and a QListWidget widget that can be used with the custom Form widget</p> Source code in <code>organelle_segmenter_plugin/util/ui_utils.py</code> <pre><code>@staticmethod\ndef multi_dropdown_row(\n    label: str, placeholder: str = None, default: str = None, options=None, enabled=False\n) -&gt; FormRow:\n\"\"\"\n    Given the contents of a dropdown and a label, return a FormRow containing\n    a label and a QListWidget widget that can be used with the custom Form widget\n    \"\"\"\n    dropdown = QListWidget()\n    dropdown.setDisabled(not enabled)\n    dropdown.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n    dropdown.setSelectionMode(QAbstractItemView.MultiSelection)\n    if placeholder is not None:\n        dropdown.addItem(placeholder)\n    if options is not None:\n        str_options = [str(option) for option in options]\n        dropdown.addItems(str_options)\n    if placeholder is None and default is not None and options is not None:\n        default_index = options.index(default)\n        dropdown.setCurrentIndex(default_index)\n\n    return FormRow(label, dropdown)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.batch_processing_view.BatchProcessingView","title":"<code>BatchProcessingView</code>","text":"<p>         Bases: <code>View</code></p> Source code in <code>organelle_segmenter_plugin/view/batch_processing_view.py</code> <pre><code>class BatchProcessingView(View):\n    btn_run_batch: QPushButton\n    progress_bar: QProgressBar\n    # field_channel: QLineEdit\n    field_segmentation_name: QLineEdit\n    field_workflow_config: FileInput\n    field_input_dir: DirInput\n    field_output_dir: DirInput\n    segmentation_name: str\n\n    def __init__(self, controller: None):\n        super().__init__(template_class=MainTemplate)\n\n        if controller is None:\n            raise ValueError(\"controller\")\n        self._controller = controller\n        self.setObjectName(\"batchProcessingView\")\n\n    def load(self, model=None):\n        self._setup_ui()\n\n    def _setup_ui(self):\n\"\"\"\n        Set up the UI for the BatchProcessingView\n        \"\"\"\n        layout = QVBoxLayout()\n        self.setLayout(layout)\n\n        # Workflow config\n        self.field_workflow_config = FileInput(\n            mode=FileInputMode.FILE, filter=\"Json file (*.json)\", placeholder_text=\"Load a JSON workflow file...\"\n        )\n        row1 = FormRow(\"1.  Load workflow:\", self.field_workflow_config)\n        self.field_workflow_config.file_selected.connect(self._form_field_changed)\n\n        # output name (populate default from json when loaded)\n        self.field_segmentation_name = QLabel()\n        self.field_segmentation_name.setText(\"----segmentation-names-----\")\n        row2 = FormRow(\"2.  Seg Names\", self.field_segmentation_name)\n\n        # # Channel index  # change this to radio button\n        # self.field_channel = QLineEdit(\"segmentation\")\n        # self.field_channel.setValidator(QIntValidator(bottom=-2))\n        # self.field_channel.textChanged.connect(self._form_field_changed)\n        # row2 = FormRow(\"2.  Structure channel index:\", self.field_channel)\n\n        # Input dir\n        self.field_input_dir = DirInput(mode=FileInputMode.DIRECTORY, placeholder_text=\"Select a directory...\")\n        self.field_input_dir.file_selected.connect(self._form_field_changed)\n        row3 = FormRow(\"3.  Input dir:\", self.field_input_dir)\n\n        # Output dir\n        self.field_output_dir = DirInput(mode=FileInputMode.DIRECTORY, placeholder_text=\"Select a directory...\")\n        self.field_output_dir.file_selected.connect(self._form_field_changed)\n        row4 = FormRow(\"4.  Output dir:\", self.field_output_dir)\n\n        form = QWidget()\n        form.setLayout(Form([row1, row2, row3, row4]))\n        layout.addWidget(form)\n\n        # Help\n        label = QLabel()\n        label.setText(\"Supported file formats: .czi (.tiff, tif, .ome.tif, .ome.tiff)\")\n        layout.addWidget(label)\n\n        # Submit\n        self.btn_run_batch = QPushButton(\"Run Batch\")\n        self.btn_run_batch.clicked.connect(self._btn_run_batch_clicked)\n        self.update_button(enabled=False)\n        layout.addWidget(self.btn_run_batch)\n\n        # Progress bar\n        self.progress_bar = QProgressBar()\n        self.progress_bar.setRange(0, 100)\n        self.progress_bar.setValue(0)\n        self.progress_bar.setTextVisible(True)\n        self.progress_bar.setVisible(False)\n        layout.addWidget(self.progress_bar)\n\n    def update_button(self, enabled: bool):\n\"\"\"\n        Update state of process button\n        Inputs:\n            enabled: True to enable the button, false to disable it\n        \"\"\"\n        self.btn_run_batch.setEnabled(enabled)\n\n    def set_run_batch_in_progress(self):\n\"\"\"\n        Update page to reflect that a batch run is in progress\n        \"\"\"\n        # TODO make a CancelButton widget to avoid repeating this connect / disconnect pattern\n        self.btn_run_batch.setText(\"Cancel\")\n        self.btn_run_batch.clicked.disconnect()\n        self.btn_run_batch.clicked.connect(self._btn_run_batch_cancel_clicked)\n        self.progress_bar.setVisible(True)\n\n    def reset_run_batch(self):\n\"\"\"\n        Reset page state to reflect that there is no batch run in progress\n        \"\"\"\n        self.progress_bar.setValue(0)\n        self.btn_run_batch.setText(\"Run Batch\")\n        self.btn_run_batch.clicked.disconnect()\n        self.btn_run_batch.clicked.connect(self._btn_run_batch_clicked)\n        self.progress_bar.setVisible(False)\n\n    def set_progress(self, progress: int):\n\"\"\"\n        Update progress bar\n\n        Inputs:\n            progress (int): numerical value to set the progress bar to\n        \"\"\"\n        self.progress_bar.setValue(progress)\n\n    #####################################################################\n    # Event handlers\n    #####################################################################\n    def _btn_run_batch_clicked(self):\n        self._controller.run_batch()\n\n    def _btn_run_batch_cancel_clicked(self):\n        self.btn_run_batch.setText(\"Canceling...\")\n        self._controller.cancel_run_batch()\n\n    def _form_field_changed(self, value):\n        workflow_configs = self.field_workflow_config.selected_file\n\n        # if isinstance(workflow_config, list):\n\n        # else:\n\n        # print(f\"testing workflow_config = {workflow_config.split('/')[-1].split('.')[0]}\")\n\n        # segmentation_name = (\n        #     self.field_segmentation_name.text()\n        #     if self.field_segmentation_name.text()\n        #     else workflow_config.split(\"/\")[-1].split(\".\")[0]\n        # )\n\n        segmentation_names = [Path(wf).stem.split(\"-\")[-1] for wf in workflow_configs]\n\n        self.field_segmentation_name.setText(f\"NAMES: {', '.join(segmentation_names)}\")\n        channel_index = -1.0\n        # channel_index = int(self.field_channel.text()) if self.field_channel.text() else None\n\n        input_dir = self.field_input_dir.selected_file\n        output_dir = self.field_output_dir.selected_file\n        self._controller.update_batch_parameters(\n            workflow_configs, channel_index, input_dir, output_dir, segmentation_names\n        )\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.batch_processing_view.BatchProcessingView.reset_run_batch","title":"<code>reset_run_batch()</code>","text":"<p>Reset page state to reflect that there is no batch run in progress</p> Source code in <code>organelle_segmenter_plugin/view/batch_processing_view.py</code> <pre><code>def reset_run_batch(self):\n\"\"\"\n    Reset page state to reflect that there is no batch run in progress\n    \"\"\"\n    self.progress_bar.setValue(0)\n    self.btn_run_batch.setText(\"Run Batch\")\n    self.btn_run_batch.clicked.disconnect()\n    self.btn_run_batch.clicked.connect(self._btn_run_batch_clicked)\n    self.progress_bar.setVisible(False)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.batch_processing_view.BatchProcessingView.set_progress","title":"<code>set_progress(progress)</code>","text":"<p>Update progress bar</p> Inputs <p>progress (int): numerical value to set the progress bar to</p> Source code in <code>organelle_segmenter_plugin/view/batch_processing_view.py</code> <pre><code>def set_progress(self, progress: int):\n\"\"\"\n    Update progress bar\n\n    Inputs:\n        progress (int): numerical value to set the progress bar to\n    \"\"\"\n    self.progress_bar.setValue(progress)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.batch_processing_view.BatchProcessingView.set_run_batch_in_progress","title":"<code>set_run_batch_in_progress()</code>","text":"<p>Update page to reflect that a batch run is in progress</p> Source code in <code>organelle_segmenter_plugin/view/batch_processing_view.py</code> <pre><code>def set_run_batch_in_progress(self):\n\"\"\"\n    Update page to reflect that a batch run is in progress\n    \"\"\"\n    # TODO make a CancelButton widget to avoid repeating this connect / disconnect pattern\n    self.btn_run_batch.setText(\"Cancel\")\n    self.btn_run_batch.clicked.disconnect()\n    self.btn_run_batch.clicked.connect(self._btn_run_batch_cancel_clicked)\n    self.progress_bar.setVisible(True)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.batch_processing_view.BatchProcessingView.update_button","title":"<code>update_button(enabled)</code>","text":"<p>Update state of process button</p> Inputs <p>enabled: True to enable the button, false to disable it</p> Source code in <code>organelle_segmenter_plugin/view/batch_processing_view.py</code> <pre><code>def update_button(self, enabled: bool):\n\"\"\"\n    Update state of process button\n    Inputs:\n        enabled: True to enable the button, false to disable it\n    \"\"\"\n    self.btn_run_batch.setEnabled(enabled)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.workflow_select_view.WorkflowSelectView","title":"<code>WorkflowSelectView</code>","text":"<p>         Bases: <code>View</code></p> Source code in <code>organelle_segmenter_plugin/view/workflow_select_view.py</code> <pre><code>class WorkflowSelectView(View):\n    _combo_layers: QComboBox\n    # _combo_channels: QComboBox\n    _load_image_warning: WarningMessage\n    _workflow_buttons: WorkflowButtons\n    _channels_note: QLabel\n    # _combo_workflows: QComboBox\n    # _workflows: List[WorkflowDefinition]\n    # _workflow_names: List[str]\n    _field_add_workflow: FileInput\n\n    def __init__(self, controller: IWorkflowSelectController):\n        super().__init__(template_class=MainTemplate)\n\n        if controller is None:\n            raise ValueError(\"controller\")\n        self._controller = controller\n        self.setObjectName(\"workflowSelectView\")\n\n    def load(self, model: SegmenterModel):\n        self._setup_ui()\n\n        self.update_layers(model.layers, model.selected_layer)\n        # self.update_channels(model.channels, model.selected_channel)\n        self._load_workflows(model.workflows)\n\n    #    # JAH: combo_box_workflows\n    #     # self._workflows = self._controller._workflow_engine._load_workflow_definitions()\n    #     # self.update_workflows(self._workflows)\n    #     self.update_workflows(model.workflows)\n\n    def _setup_ui(self):\n        layout = QVBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        self.setLayout(layout)\n\n        # Title\n        workflow_selection_title = QLabel(\"Workflow selection steps:\")\n        workflow_selection_title.setObjectName(\"workflowSelectionTitle\")\n\n        # Warning\n        self._load_image_warning = WarningMessage(\"Open a 3D image in Napari first!\")\n        self._load_image_warning.setVisible(False)\n\n        # Dropdowns\n        layers_dropdown = UiUtils.dropdown_row(\"1.\", \"Select multichannel 3D Napari image layer\", enabled=False)\n        self._combo_layers = layers_dropdown.widget\n        self._combo_layers.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n        self._combo_layers.setMaxVisibleItems(20)\n        self._combo_layers.activated.connect(self._combo_layers_activated)\n\n\n        # channels_dropdown = UiUtils.dropdown_row(\"2.\", \"Select Channels)\", enabled=False)\n        # self._combo_channels = channels_dropdown.widget\n        # self._combo_channels.setStyleSheet(\"QComboBox { combobox-popup: 0; }\")\n        # self._combo_channels.setMaxVisibleItems(20)\n        # self._combo_channels.activated.connect(self._combo_channels_activated)\n\n        self._channels_note = QLabel() # in case we want to update selection?\n        self._channels_note.setText(\"----ALL CHANNELS-----\")\n        channels_note_label = FormRow(\"2.  Channels\", self._channels_note)\n\n        # Workflow config add\n        self._field_add_workflow = FileInput(\n            mode=FileInputMode.FILE, filter=\"Json file (*.json)\", placeholder_text=\"None loaded...\"\n        )\n        add_workflow = FormRow(\"3.  Add  workflow:\", self._field_add_workflow)\n        self._field_add_workflow.file_selected.connect(self._form_field_changed)\n\n        layer_channel_selections = QWidget()\n        layer_channel_selections.setLayout(Form([layers_dropdown, channels_note_label, add_workflow]))\n\n        # Add all widgets\n        widgets = [\n            workflow_selection_title,\n            self._load_image_warning,\n            layer_channel_selections,\n        ]\n        for widget in widgets:\n            layout.addWidget(widget)\n\n        self._workflow_buttons = WorkflowButtons()\n        self._workflow_buttons.workflowSelected.connect(self._workflow_selected)\n        self.layout().addWidget(self._workflow_buttons)\n\n        # TODO:  add alternative \"load workflow widget here\"\n        # e.g. from batch_processing_view\n        ## Workflow config\n        ## self.field_workflow_config = FileInput(\n        ##     mode=FileInputMode.FILE, filter=\"Json file (*.json)\", placeholder_text=\"Load a JSON workflow file...\"\n        ## )\n        ## self.field_workflow_config.file_selected.connect(self._form_field_changed)\n        ## row1 = FormRow(\"1.  Load workflow:\", self.field_workflow_config)\n\n    def update_layers(self, layers: List[str], selected_layer: Layer = None):\n\"\"\"\n        Update / repopulate the list of selectable layers\n        Inputs:\n            layers: List of layer names\n            selected_layer_name: (optional) name of the layer to pre-select\n        \"\"\"\n        self._reset_combo_box(self._combo_layers)\n\n        if layers is None or len(layers) == 0:\n            self._load_image_warning.setVisible(True)\n            self._combo_layers.setEnabled(False)\n        else:\n            # reverse layer list when adding to combobox\n            # to mimic layer list on napari ui\n            self._combo_layers.addItems(layers[::-1])\n            if selected_layer is not None:\n                self._combo_layers.setCurrentText(selected_layer.name)\n            self._combo_layers.setEnabled(True)\n            self._load_image_warning.setVisible(False)\n\n\n    # def update_channels(self, channels: List[Channel], selected_channel: Channel = None):\n    #     \"\"\"\n    #     Update / repopulate the list of selectable channels\n    #     Inputs:\n    #         channels: List of channel names\n    #     \"\"\"\n    #     self._reset_combo_box(self._combo_channels)\n    #     # JAH:  make a default \"negative\" channel to NOT choose one...\n    #     if channels is None or len(channels) == 0:\n    #         self._combo_channels.setEnabled(False)\n    #     else:\n    #         model = QStandardItemModel()\n    #         model.appendRow(QStandardItem(self._combo_channels.itemText(0)))\n\n    #         for channel in channels:\n    #             item = QStandardItem(channel.display_name)\n    #             item.setData(channel, QtCore.Qt.UserRole)\n    #             model.appendRow(item)\n\n    #         self._combo_channels.setModel(model)\n\n    #         if selected_channel is not None:\n    #             # TODO relying on display name isn't the best as it will probably\n    #             #      cause issues if channel names aren't unique\n    #             # TODO refactor by making Channel derive from QStandardItem and do something like this:\n    #             #      selected_index = model.indexFromItem(selected_channel)\n    #             #      self.combo_channels.setCurrentIndex(selected_index)\n    #             self._combo_channels.setCurrentText(selected_channel.display_name)\n\n    #         self._combo_channels.setEnabled(True)\n\n    def update_workflows(self, enabled: bool):\n\"\"\"\n        Update state of workflow list\n        Inputs:\n            enabled: True to enable the list, False to disable it\n        \"\"\"\n        self._workflow_buttons.setEnabled(enabled)\n\n    def _load_workflows(self, workflows: List[WorkflowDefinition]):\n\"\"\"\n        Load workflows into workflow grid\n        \"\"\"\n        # self._workflow = workflows\n        # self._workflow_names = [wf.name for wf in workflows]\n        self._workflow_buttons.load_workflows(workflows)\n\n    def _reset_combo_box(self, combo: QComboBox):\n\"\"\"\n        Reset a combo box to its original state, keeping the header but removing all other items\n        \"\"\"\n        if combo.count() &gt; 0:\n            header = combo.itemText(0)\n            combo.clear()\n            combo.addItem(header)\n\n    #####################################################################\n    # Event handlers\n    #####################################################################\n\n    def _combo_layers_activated(self, index: int):\n        if index == 0:  # index 0 is the dropdown header\n            self._controller.unselect_layer()\n        else:\n            self._controller.select_layer(self._combo_layers.itemText(index))\n\n    # def _combo_channels_activated(self, index: int):\n    #     if index == 0:\n    #         self._controller.unselect_channel()\n    #     else:\n    #         self._controller.select_channel(self._combo_channels.itemData(index, role=QtCore.Qt.UserRole))\n\n    def _workflow_selected(self, workflow_name: str):\n        self._controller.select_workflow(workflow_name)\n\n\n    def _form_field_changed(self, value):\n        workflow_configs = self._field_add_workflow.selected_file\n        for wf in workflow_configs:\n            self._controller.add_workflow(wf)\n            self._workflow_buttons._add_new_button(Path(wf).stem)\n        self.update_workflows(enabled=True)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.workflow_select_view.WorkflowSelectView.update_layers","title":"<code>update_layers(layers, selected_layer=None)</code>","text":"<p>Update / repopulate the list of selectable layers</p> Inputs <p>layers: List of layer names selected_layer_name: (optional) name of the layer to pre-select</p> Source code in <code>organelle_segmenter_plugin/view/workflow_select_view.py</code> <pre><code>def update_layers(self, layers: List[str], selected_layer: Layer = None):\n\"\"\"\n    Update / repopulate the list of selectable layers\n    Inputs:\n        layers: List of layer names\n        selected_layer_name: (optional) name of the layer to pre-select\n    \"\"\"\n    self._reset_combo_box(self._combo_layers)\n\n    if layers is None or len(layers) == 0:\n        self._load_image_warning.setVisible(True)\n        self._combo_layers.setEnabled(False)\n    else:\n        # reverse layer list when adding to combobox\n        # to mimic layer list on napari ui\n        self._combo_layers.addItems(layers[::-1])\n        if selected_layer is not None:\n            self._combo_layers.setCurrentText(selected_layer.name)\n        self._combo_layers.setEnabled(True)\n        self._load_image_warning.setVisible(False)\n</code></pre>"},{"location":"organelle_segmenter_plugin/#organelle_segmenter_plugin.view.workflow_select_view.WorkflowSelectView.update_workflows","title":"<code>update_workflows(enabled)</code>","text":"<p>Update state of workflow list</p> Inputs <p>enabled: True to enable the list, False to disable it</p> Source code in <code>organelle_segmenter_plugin/view/workflow_select_view.py</code> <pre><code>def update_workflows(self, enabled: bool):\n\"\"\"\n    Update state of workflow list\n    Inputs:\n        enabled: True to enable the list, False to disable it\n    \"\"\"\n    self._workflow_buttons.setEnabled(enabled)\n</code></pre>"}]}